-- ZOMBIE CONTROL: Change pause_zombie to true to stop zombie movement for debugging
-- This allows clicking around without being chased

-- =============================================================================
-- PLATFORM DEFINITIONS - LEVEL 2
-- Change platform coordinates here for easy adjustment
-- =============================================================================
local LEVEL2_PLATFORMS = {
    {x1 = 41, x2 = 180, y = 250, name = "platform1"},
    {x1 = 41, x2 = 180, y = 136, name = "platform2"}, 
    {x1 = 310, x2 = 508, y = 136, name = "platform3"},
    {x1 = 228, x2 = 290, y = 88, name = "platform4"},
    {x1 = 40, x2 = 230, y = 330, name = "train_platform"}  -- Platform for boarding train
}

-- Train coordinates
local TRAIN_POSITION = {x = 132, y = 391, z = 0}

function init(self)
    self.game_over = false
    self.stage_complete = false
    self.level = 1  -- Current level (1 or 2)
    self.debug_mode = false  -- Debug coordinate mode
    self.pause_zombie = false  -- Control zombie movement (set to true to pause zombie)
    
    -- Store platform definitions for access by other scripts
    self.level2_platforms = LEVEL2_PLATFORMS
    self.train_position = TRAIN_POSITION
    
    -- Level 2 phase system
    self.level2_phase = 1  -- 1=platforms, 2=moving_train, 3=arrival
    self.train_moving = false  -- Is train currently moving
    self.train_speed = 70  -- Train movement speed (pixels/second)
    self.train_target_x = 1100  -- Train stops when reaching this X coordinate
    
    -- Single screen platformer setup
    self.screen_width = 960  -- Screen width
    self.screen_height = 640
    
    -- Stage completion boundary
    self.completion_x = 937
    
    -- Screen blink variables for level transition
    self.blink_timer = 0
    self.blink_count = 0
    self.blink_duration = 0.1  -- Each blink lasts 0.1 seconds
    self.total_blinks = 6      -- 3 full blinks (on/off cycles)
    
    -- Debug: Check initial player position
    local player_pos = go.get_position("player")
    print(string.format("DEBUG MAIN: Player position at main init: (%.1f, %.1f)", player_pos.x, player_pos.y))
    
    -- Force set player position to door center multiple times to ensure it sticks
    for i = 1, 3 do
        go.set_position(vmath.vector3(212, 55, 0), "player")
        player_pos = go.get_position("player")
        print(string.format("DEBUG MAIN: Player position after forced set attempt %d: (%.1f, %.1f)", i, player_pos.x, player_pos.y))
    end
    
    -- Spawn zombie at fixed position
    spawn_zombie()
    
    -- Hide train initially (level 1 has no train)
    go.set_position(vmath.vector3(-1000, -1000, 0), "train")
    
    -- Debug: Check player position after spawn_zombie
    player_pos = go.get_position("player")
    print(string.format("DEBUG MAIN: Player position after spawn_zombie: (%.1f, %.1f)", player_pos.x, player_pos.y))
end

function update(self, dt)
    -- Handle screen blink transition to level 2
    if self.stage_complete and self.level == 1 and self.blink_count < self.total_blinks then
        self.blink_timer = self.blink_timer + dt
        if self.blink_timer >= self.blink_duration then
            self.blink_timer = 0
            self.blink_count = self.blink_count + 1
            
            -- Toggle screen overlay (simulate blink)
            if self.blink_count % 2 == 1 then
                -- Show dark overlay
                msg.post("game_over", "show")  -- Reuse game over overlay for blink
            else
                -- Hide dark overlay  
                msg.post("game_over", "hide")
            end
            
            -- After all blinks, transition to level 2
            if self.blink_count >= self.total_blinks then
                start_level_2(self)
            end
        end
    -- Normal gameplay - check for stage completion or level 2 phase transitions
    elseif not self.game_over and not self.stage_complete then
        if self.level == 1 then
            -- Level 1: Check for stage completion
            local player_pos = go.get_position("player")
            if player_pos.x > self.completion_x then
                stage_complete(self)
            end
        elseif self.level == 2 then
            -- Level 2: Handle phase transitions and train movement
            handle_level2_phases(self, dt)
        end
    end
end

function spawn_zombie()
    -- Spawn zombie at fixed position on far left, same height as player
    local zombie_pos = vmath.vector3(50, 56, 0)
    go.set_position(zombie_pos, "zombie")
end

function handle_level2_phases(self, dt)
    if self.level2_phase == 1 then
        -- Phase 1: Platform jumping - check if player reached train
        if check_player_on_train(self) then
            start_phase2(self)
        end
    elseif self.level2_phase == 2 then
        -- Phase 2: Moving train - move train and player together
        if self.train_moving then
            move_train_and_player(self, dt)
        end
    elseif self.level2_phase == 3 then
        -- Phase 3: Arrival - handle victory condition
        -- TODO: Implement arrival phase
    end
end

function check_player_on_train(self)
    local player_pos = go.get_position("player")
    local train_pos = go.get_position("train")
    
    -- Check if player is on train (within train bounds and above it)
    local train_left = train_pos.x - 214 / 2  -- Train width / 2
    local train_right = train_pos.x + 214 / 2
    local train_top = train_pos.y + 165 / 2   -- Train height / 2
    
    -- Player collision box
    local player_width = 216 * 0.3  -- Player scaled width
    local player_left = player_pos.x - player_width / 2
    local player_right = player_pos.x + player_width / 2
    
    -- Check horizontal overlap and vertical proximity
    local horizontal_overlap = player_right > train_left and player_left < train_right
    local on_train_top = math.abs(player_pos.y - (train_top + 50)) < 10  -- Player standing on train
    
    return horizontal_overlap and on_train_top
end

function start_phase2(self)
    print("\nüöÇ PHASE 2: TRAIN DEPARTURE! All aboard!")
    self.level2_phase = 2
    self.train_moving = true
    
    -- Disable debug mode during train movement
    self.debug_mode = false
    
    print("Train is now moving toward the desert...")
end

function move_train_and_player(self, dt)
    local train_pos = go.get_position("train")
    local player_pos = go.get_position("player")
    
    -- Move train to the right
    train_pos.x = train_pos.x + self.train_speed * dt
    go.set_position(train_pos, "train")
    
    -- Move player with train (if still on train)
    if check_player_on_train(self) then
        player_pos.x = player_pos.x + self.train_speed * dt
        go.set_position(player_pos, "player")
    end
    
    -- Check if train reached target position (right edge)
    if train_pos.x >= self.train_target_x then
        start_phase3(self)
    end
end

function start_phase3(self)
    print("\nüèÅ PHASE 3: TRAIN ARRIVAL! You've reached the desert station!")
    self.level2_phase = 3
    self.train_moving = false
    
    -- For now, just complete the level
    self.stage_complete = true
    print("LEVEL 2 COMPLETE! Great job surviving the journey!")
end

function start_level_2(self)
    print("\n--- STARTING LEVEL 2! ---\n")
    
    -- Update game state
    self.level = 2
    self.stage_complete = false
    self.debug_mode = true  -- Auto-enable debug mode for level 2
    
    -- Reset level 2 phase system
    self.level2_phase = 1  -- Start with platform phase
    self.train_moving = false
    
    -- Change background to level 2
    msg.post("background#sprite", "play_animation", {id = hash("screen_2_bg")})
    
    -- Reset player to same starting position as level 1
    go.set_position(vmath.vector3(212, 55, 0), "player")
    
    -- Hide zombie completely for level 2 start (no zombies initially)
    go.set_position(vmath.vector3(-1000, -1000, 0), "zombie")  -- Move offscreen
    msg.post("zombie", "disable")
    
    -- Create train at specified coordinates
    go.set_position(vmath.vector3(self.train_position.x, self.train_position.y, self.train_position.z), "train")
    
    -- Send platform definitions to player script
    msg.post("player", "set_platforms", {platforms = self.level2_platforms})
    
    -- Enable player input for movement
    msg.post("player", "enable_input")
    
    print(string.format("Level 2: No zombies initially, train positioned at (%.0f, %.0f)", 
          self.train_position.x, self.train_position.y))
    
    -- Hide game over overlay completely (used for screen blink effect)
    msg.post("game_over", "hide")
    
    -- Wait a frame then acquire input focus to avoid conflicts
    timer.delay(0.01, false, function()
        msg.post(".", "acquire_input_focus")
        print("DEBUG MODE ACTIVATED: Click anywhere to see coordinates")
        print("Main script input focus acquired for debug mode")
    end)
    
    print("Level 2 loaded with screen_2_bg.png background")
    print("Player position:", go.get_position("player"))
    print("Zombie position:", go.get_position("zombie"))
    print("Train position:", go.get_position("train"))
end

function stage_complete(self)
    self.stage_complete = true
    
    -- Stop zombie movement
    msg.post("zombie", "disable")
    
    -- Disable player input  
    msg.post("player", "disable_input")
    
    if self.level == 1 then
        -- Level 1 complete - start level 2 transition
        print("\n--- LEVEL 1 COMPLETE! Transitioning to Level 2... ---\n")
        self.blink_timer = 0
        self.blink_count = 0
        -- Blinking will be handled in update()
    else
        -- Level 2 complete - game finished!
        print("\n\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        print("‚ïë                               ‚ïë")  
        print("‚ïë       GAME COMPLETE!          ‚ïë")
        print("‚ïë                               ‚ïë")
        print("‚ïë   You beat both levels!       ‚ïë")
        print("‚ïë                               ‚ïë")
        print("‚ïë     Press R to restart        ‚ïë")
        print("‚ïë                               ‚ïë")
        print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n")
        
        -- Take input focus for restart
        msg.post(".", "acquire_input_focus")
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("game_over") then
        if not self.game_over then
            self.game_over = true
            print("DEBUG: Game over triggered, acquiring input focus for restart")
            
            -- Stop zombie movement
            msg.post("zombie", "disable")
            
            -- Disable player input
            msg.post("player", "disable_input")
            
            -- Show game over overlay
            msg.post("game_over", "show")
            
            -- Take input focus for restart
            msg.post(".", "acquire_input_focus")
            print("DEBUG: Input focus acquired for main script restart")
        end
    end
end

function on_input(self, action_id, action)
    -- Debug: Show all input when in debug mode
    if self.debug_mode and (action.pressed or action.released) then
        print(string.format("DEBUG INPUT: action_id=%s, pressed=%s, debug_mode=%s, level=%d", 
              tostring(action_id), tostring(action.pressed), tostring(self.debug_mode), self.level))
    end
    
    -- Handle debug mode coordinate clicking (level 2) - don't consume input so player can still move
    if self.debug_mode and action_id == hash("click") and action.pressed then
        print(string.format("üéØ DEBUG LEVEL 2: Clicked at coordinates (%.0f, %.0f)", action.x, action.y))
        -- Don't return true - let input pass through to player
    end
    
    -- Handle debug mode coordinate clicking with touch action too (fallback)
    if self.debug_mode and action_id == hash("touch") and action.pressed then
        print(string.format("üéØ DEBUG LEVEL 2 (touch): Clicked at coordinates (%.0f, %.0f)", action.x, action.y))
        -- Don't return true - let input pass through to player  
    end
    
    -- Debug: Log all input during game over / stage complete
    if (self.game_over or self.stage_complete) then
        print(string.format("DEBUG MAIN INPUT: action_id=%s, pressed=%s, game_over=%s, stage_complete=%s", 
              tostring(action_id), tostring(action.pressed), tostring(self.game_over), tostring(self.stage_complete)))
    end
    
    -- Handle restart from both game over and stage completion (only if level 2 complete or game over)
    if ((self.game_over) or (self.stage_complete and self.level == 2)) and action_id == hash("restart") and action.pressed then
        -- Store current states before resetting
        local was_game_over = self.game_over
        local was_stage_complete = self.stage_complete
        
        -- Reset game state to level 1
        self.game_over = false
        self.stage_complete = false
        self.level = 1
        self.debug_mode = false
        -- Keep pause_zombie setting as user preference
        
        -- Reset level 2 phase system
        self.level2_phase = 1
        self.train_moving = false
        
        -- Reset background to level 1
        msg.post("background#sprite", "play_animation", {id = hash("screen_1_bg")})
        
        -- Control zombie movement based on pause_zombie variable
        if self.pause_zombie then
            msg.post("zombie", "disable")
            print("Zombie movement PAUSED for debugging")
        else
            msg.post("zombie", "enable") 
            print("Zombie movement ENABLED")
        end
        
        -- Hide game over overlay if it was shown
        if was_game_over then
            msg.post("game_over", "hide")
        end
        
        -- Enable player input
        msg.post("player", "enable_input")
        
        -- Release input focus from main script
        msg.post(".", "release_input_focus")
        
        -- Reset player position to door center
        go.set_position(vmath.vector3(212, 55, 0), "player")
        
        -- Hide train (level 1 has no train)
        go.set_position(vmath.vector3(-1000, -1000, 0), "train")
        
        -- Respawn zombie
        spawn_zombie()
        
        print("\n--- Game Restarted to Level 1! ---\n")
    end
end