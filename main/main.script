-- ZOMBIE CONTROL: Change pause_zombie to true to stop zombie movement for debugging
-- This allows clicking around without being chased
function init(self)
    self.game_over = false
    self.stage_complete = false
    self.level = 1  -- Current level (1 or 2)
    self.debug_mode = false  -- Debug coordinate mode
    self.pause_zombie = false  -- Control zombie movement (set to true to pause zombie)
    
    -- Single screen platformer setup
    self.screen_width = 960  -- Screen width
    self.screen_height = 640
    
    -- Stage completion boundary
    self.completion_x = 937
    
    -- Screen blink variables for level transition
    self.blink_timer = 0
    self.blink_count = 0
    self.blink_duration = 0.1  -- Each blink lasts 0.1 seconds
    self.total_blinks = 6      -- 3 full blinks (on/off cycles)
    
    -- Debug: Check initial player position
    local player_pos = go.get_position("player")
    print(string.format("DEBUG MAIN: Player position at main init: (%.1f, %.1f)", player_pos.x, player_pos.y))
    
    -- Force set player position to door center multiple times to ensure it sticks
    for i = 1, 3 do
        go.set_position(vmath.vector3(212, 55, 0), "player")
        player_pos = go.get_position("player")
        print(string.format("DEBUG MAIN: Player position after forced set attempt %d: (%.1f, %.1f)", i, player_pos.x, player_pos.y))
    end
    
    -- Spawn zombie at fixed position
    spawn_zombie()
    
    -- Hide train initially (level 1 has no train)
    go.set_position(vmath.vector3(-1000, -1000, 0), "train")
    
    -- Debug: Check player position after spawn_zombie
    player_pos = go.get_position("player")
    print(string.format("DEBUG MAIN: Player position after spawn_zombie: (%.1f, %.1f)", player_pos.x, player_pos.y))
end

function update(self, dt)
    -- Handle screen blink transition to level 2
    if self.stage_complete and self.level == 1 and self.blink_count < self.total_blinks then
        self.blink_timer = self.blink_timer + dt
        if self.blink_timer >= self.blink_duration then
            self.blink_timer = 0
            self.blink_count = self.blink_count + 1
            
            -- Toggle screen overlay (simulate blink)
            if self.blink_count % 2 == 1 then
                -- Show dark overlay
                msg.post("game_over", "show")  -- Reuse game over overlay for blink
            else
                -- Hide dark overlay  
                msg.post("game_over", "hide")
            end
            
            -- After all blinks, transition to level 2
            if self.blink_count >= self.total_blinks then
                start_level_2(self)
            end
        end
    -- Normal gameplay - check for stage completion
    elseif not self.game_over and not self.stage_complete then
        local player_pos = go.get_position("player")
        if player_pos.x > self.completion_x then
            stage_complete(self)
        end
    end
end

function spawn_zombie()
    -- Spawn zombie at fixed position on far left, same height as player
    local zombie_pos = vmath.vector3(50, 56, 0)
    go.set_position(zombie_pos, "zombie")
end

function start_level_2(self)
    print("\n--- STARTING LEVEL 2! ---\n")
    
    -- Update game state
    self.level = 2
    self.stage_complete = false
    self.debug_mode = true  -- Auto-enable debug mode for level 2
    
    -- Change background to level 2
    msg.post("background#sprite", "play_animation", {id = hash("screen_2_bg")})
    
    -- Reset player to same starting position as level 1
    go.set_position(vmath.vector3(212, 55, 0), "player")
    
    -- Hide zombie completely for level 2 start (no zombies initially)
    go.set_position(vmath.vector3(-1000, -1000, 0), "zombie")  -- Move offscreen
    msg.post("zombie", "disable")
    
    -- Create train at specified coordinates
    go.set_position(vmath.vector3(132, 391, 0), "train")
    
    -- Enable player input for movement
    msg.post("player", "enable_input")
    
    print("Level 2: No zombies initially, train positioned at (132, 391)")
    
    -- Hide game over overlay completely (used for screen blink effect)
    msg.post("game_over", "hide")
    
    -- Wait a frame then acquire input focus to avoid conflicts
    timer.delay(0.01, false, function()
        msg.post(".", "acquire_input_focus")
        print("DEBUG MODE ACTIVATED: Click anywhere to see coordinates")
        print("Main script input focus acquired for debug mode")
    end)
    
    print("Level 2 loaded with screen_2_bg.png background")
    print("Player position:", go.get_position("player"))
    print("Zombie position:", go.get_position("zombie"))
    print("Train position:", go.get_position("train"))
end

function stage_complete(self)
    self.stage_complete = true
    
    -- Stop zombie movement
    msg.post("zombie", "disable")
    
    -- Disable player input  
    msg.post("player", "disable_input")
    
    if self.level == 1 then
        -- Level 1 complete - start level 2 transition
        print("\n--- LEVEL 1 COMPLETE! Transitioning to Level 2... ---\n")
        self.blink_timer = 0
        self.blink_count = 0
        -- Blinking will be handled in update()
    else
        -- Level 2 complete - game finished!
        print("\n\n╔═══════════════════════════════╗")
        print("║                               ║")  
        print("║       GAME COMPLETE!          ║")
        print("║                               ║")
        print("║   You beat both levels!       ║")
        print("║                               ║")
        print("║     Press R to restart        ║")
        print("║                               ║")
        print("╚═══════════════════════════════╝\n")
        
        -- Take input focus for restart
        msg.post(".", "acquire_input_focus")
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("game_over") then
        if not self.game_over then
            self.game_over = true
            print("DEBUG: Game over triggered, acquiring input focus for restart")
            
            -- Stop zombie movement
            msg.post("zombie", "disable")
            
            -- Disable player input
            msg.post("player", "disable_input")
            
            -- Show game over overlay
            msg.post("game_over", "show")
            
            -- Take input focus for restart
            msg.post(".", "acquire_input_focus")
            print("DEBUG: Input focus acquired for main script restart")
        end
    end
end

function on_input(self, action_id, action)
    -- Debug: Show all input when in debug mode
    if self.debug_mode and (action.pressed or action.released) then
        print(string.format("DEBUG INPUT: action_id=%s, pressed=%s, debug_mode=%s, level=%d", 
              tostring(action_id), tostring(action.pressed), tostring(self.debug_mode), self.level))
    end
    
    -- Handle debug mode coordinate clicking (level 2) - don't consume input so player can still move
    if self.debug_mode and action_id == hash("click") and action.pressed then
        print(string.format("🎯 DEBUG LEVEL 2: Clicked at coordinates (%.0f, %.0f)", action.x, action.y))
        -- Don't return true - let input pass through to player
    end
    
    -- Handle debug mode coordinate clicking with touch action too (fallback)
    if self.debug_mode and action_id == hash("touch") and action.pressed then
        print(string.format("🎯 DEBUG LEVEL 2 (touch): Clicked at coordinates (%.0f, %.0f)", action.x, action.y))
        -- Don't return true - let input pass through to player  
    end
    
    -- Debug: Log all input during game over / stage complete
    if (self.game_over or self.stage_complete) then
        print(string.format("DEBUG MAIN INPUT: action_id=%s, pressed=%s, game_over=%s, stage_complete=%s", 
              tostring(action_id), tostring(action.pressed), tostring(self.game_over), tostring(self.stage_complete)))
    end
    
    -- Handle restart from both game over and stage completion (only if level 2 complete or game over)
    if ((self.game_over) or (self.stage_complete and self.level == 2)) and action_id == hash("restart") and action.pressed then
        -- Store current states before resetting
        local was_game_over = self.game_over
        local was_stage_complete = self.stage_complete
        
        -- Reset game state to level 1
        self.game_over = false
        self.stage_complete = false
        self.level = 1
        self.debug_mode = false
        -- Keep pause_zombie setting as user preference
        
        -- Reset background to level 1
        msg.post("background#sprite", "play_animation", {id = hash("screen_1_bg")})
        
        -- Control zombie movement based on pause_zombie variable
        if self.pause_zombie then
            msg.post("zombie", "disable")
            print("Zombie movement PAUSED for debugging")
        else
            msg.post("zombie", "enable") 
            print("Zombie movement ENABLED")
        end
        
        -- Hide game over overlay if it was shown
        if was_game_over then
            msg.post("game_over", "hide")
        end
        
        -- Enable player input
        msg.post("player", "enable_input")
        
        -- Release input focus from main script
        msg.post(".", "release_input_focus")
        
        -- Reset player position to door center
        go.set_position(vmath.vector3(212, 55, 0), "player")
        
        -- Hide train (level 1 has no train)
        go.set_position(vmath.vector3(-1000, -1000, 0), "train")
        
        -- Respawn zombie
        spawn_zombie()
        
        print("\n--- Game Restarted to Level 1! ---\n")
    end
end