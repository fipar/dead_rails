
function init(self)
    self.speed = 60
    self.player_url = nil
    self.catch_distance = 30
    self.enabled = true
    self.debug_printed = false
    sprite.play_flipbook("#sprite", "walk")
    
    -- Physics properties (same as player)
    self.velocity_y = 0         -- Vertical velocity
    self.gravity = -800         -- Gravity force (pixels/second^2)  
    self.ground_y = 56          -- Ground level (same as spawn Y)
    self.on_ground = true       -- Whether zombie is on ground
    
    -- Tactical pause system
    self.stunned = false        -- Whether zombie is stunned by player jump
    self.stun_timer = 0.0       -- Time remaining in stun
    self.stun_duration = 0.8    -- Stun duration in seconds
    
    -- Screen boundaries (same as player)
    self.screen_left = 20       -- Left boundary
    self.screen_right = 940     -- Right boundary (960 - 20)
    self.screen_bottom = 0      -- Bottom boundary
    self.screen_top = 640       -- Top boundary
    
    -- Find the player object
    self.player_url = msg.url("player")
end

function update(self, dt)
    
    if not self.enabled then
        return
    end
    
    -- Handle stun timer
    if self.stunned then
        self.stun_timer = self.stun_timer - dt
        if self.stun_timer <= 0 then
            self.stunned = false
            sprite.play_flipbook("#sprite", "walk")  -- Resume walking animation
            print("DEBUG: Zombie stun ended, resuming chase")
        else
            -- Stay stunned, don't move
            sprite.play_flipbook("#sprite", "idle")  -- Show idle animation while stunned
            return
        end
    end
    
    if self.player_url then
        local zombie_pos = go.get_position()
        local player_pos = go.get_position(self.player_url)
        
        -- Debug: Print player position once at game start
        if not self.debug_printed then
            print(string.format("DEBUG ZOMBIE: Player actual position is (%.1f, %.1f)", player_pos.x, player_pos.y))
            print(string.format("DEBUG ZOMBIE: Zombie position is (%.1f, %.1f)", zombie_pos.x, zombie_pos.y))
            self.debug_printed = true
        end
        
        -- Calculate direction to player
        local dx = player_pos.x - zombie_pos.x
        local dy = player_pos.y - zombie_pos.y
        local distance = math.sqrt(dx * dx + dy * dy)
        
        -- Check if caught the player
        if distance < self.catch_distance then
            msg.post("main#script", "game_over")
            return
        end
        
        -- Apply gravity
        self.velocity_y = self.velocity_y + self.gravity * dt
        
        -- Move towards player horizontally only with boundary checking
        if distance > 0 then
            local move_x = (dx / math.abs(dx)) * self.speed * dt  -- Only horizontal direction
            local new_x = zombie_pos.x + move_x
            -- Clamp to screen boundaries
            new_x = math.max(self.screen_left, math.min(self.screen_right, new_x))
            zombie_pos.x = new_x
        end
        
        -- Apply vertical movement (gravity only)
        zombie_pos.y = zombie_pos.y + self.velocity_y * dt
        
        -- Ground collision
        if zombie_pos.y <= self.ground_y then
            zombie_pos.y = self.ground_y
            self.velocity_y = 0
            self.on_ground = true
        else
            self.on_ground = false
        end
        
        -- Clamp vertical position to screen boundaries
        zombie_pos.y = math.max(self.screen_bottom, math.min(self.screen_top, zombie_pos.y))
        
        go.set_position(zombie_pos)
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("disable") then
        self.enabled = false
        sprite.play_flipbook("#sprite", "idle")
    elseif message_id == hash("enable") then
        self.enabled = true
        self.stunned = false  -- Clear stun when re-enabling
        sprite.play_flipbook("#sprite", "walk")
    elseif message_id == hash("player_jumped") then
        -- Player jumped - stun zombie for tactical advantage
        self.stunned = true
        self.stun_timer = self.stun_duration
        sprite.play_flipbook("#sprite", "idle")  -- Show confused/stunned animation
        print(string.format("DEBUG: Zombie stunned for %.1f seconds due to player jump", self.stun_duration))
    end
end